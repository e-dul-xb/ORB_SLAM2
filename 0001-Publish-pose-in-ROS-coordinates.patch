From 4372c96de85d12b4899ea6fa4d7faa59c8e3aaf1 Mon Sep 17 00:00:00 2001
From: EmilDuleba <e.duleba@xberry.tech>
Date: Tue, 25 Jul 2017 11:46:07 +0200
Subject: [PATCH] Publish pose in ROS coordinates. https://github.com/raulmur/ORB_SLAM2/pull/102

---
 Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc | 56 ++++++++++++++++++++++++++++++++--
 1 file changed, 54 insertions(+), 2 deletions(-)

diff --git a/Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc b/Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc
index afa567d..d2f3d4c 100644
--- a/Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc
+++ b/Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc
@@ -33,6 +33,9 @@
 #include<opencv2/core/core.hpp>
 
 #include"../../../include/System.h"
+#include "geometry_msgs/TransformStamped.h"
+#include "tf/transform_datatypes.h"
+#include <tf/transform_broadcaster.h>
 
 using namespace std;
 
@@ -66,7 +69,8 @@ int main(int argc, char **argv)
     ros::NodeHandle nh;
 
     message_filters::Subscriber<sensor_msgs::Image> rgb_sub(nh, "/camera/rgb/image_raw", 1);
-    message_filters::Subscriber<sensor_msgs::Image> depth_sub(nh, "camera/depth_registered/image_raw", 1);
+    // TODO: adjust depth image topic
+    message_filters::Subscriber<sensor_msgs::Image> depth_sub(nh, "/camera/depth_registered/sw_registered/image_rect_raw", 1);
     typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image, sensor_msgs::Image> sync_pol;
     message_filters::Synchronizer<sync_pol> sync(sync_pol(10), rgb_sub,depth_sub);
     sync.registerCallback(boost::bind(&ImageGrabber::GrabRGBD,&igb,_1,_2));
@@ -109,7 +113,55 @@ void ImageGrabber::GrabRGBD(const sensor_msgs::ImageConstPtr& msgRGB,const senso
         return;
     }
 
-    mpSLAM->TrackRGBD(cv_ptrRGB->image,cv_ptrD->image,cv_ptrRGB->header.stamp.toSec());
+    cv::Mat pose = mpSLAM->TrackRGBD(cv_ptrRGB->image,cv_ptrD->image,cv_ptrRGB->header.stamp.toSec());
+
+    if (pose.empty())
+        return;
+
+    /* global left handed coordinate system */
+    static cv::Mat pose_prev = cv::Mat::eye(4,4, CV_32F);
+    static cv::Mat world_lh = cv::Mat::eye(4,4, CV_32F);
+    // matrix to flip signs of sinus in rotation matrix, not sure why we need to do that
+    static const cv::Mat flipSign = (cv::Mat_<float>(4,4) <<   1,-1,-1, 1,
+                                     -1, 1,-1, 1,
+                                     -1,-1, 1, 1,
+                                     1, 1, 1, 1);
+
+    //prev_pose * T = pose
+    cv::Mat translation =  (pose * pose_prev.inv()).mul(flipSign);
+    world_lh = world_lh * translation;
+    pose_prev = pose.clone();
+
+    tf::Matrix3x3 tf3d;
+    tf3d.setValue(pose.at<float>(0,0), pose.at<float>(0,1), pose.at<float>(0,2),
+                  pose.at<float>(1,0), pose.at<float>(1,1), pose.at<float>(1,2),
+                  pose.at<float>(2,0), pose.at<float>(2,1), pose.at<float>(2,2));
+
+    tf::Vector3 cameraTranslation_rh( world_lh.at<float>(0,3),world_lh.at<float>(1,3), - world_lh.at<float>(2,3) );
+
+    //rotate 270deg about x and 270deg about x to get ENU: x forward, y left, z up
+    const tf::Matrix3x3 rotation270degXZ(   0, 1, 0,
+                                            0, 0, 1,
+                                            1, 0, 0);
+
+    static tf::TransformBroadcaster br;
+
+    tf::Matrix3x3 globalRotation_rh = tf3d;
+    tf::Vector3 globalTranslation_rh = cameraTranslation_rh * rotation270degXZ;
+
+    tf::Quaternion tfqt;
+    globalRotation_rh.getRotation(tfqt);
+
+    double aux = tfqt[0];
+    tfqt[0]=-tfqt[2];
+    tfqt[2]=tfqt[1];
+    tfqt[1]=aux;
+
+    tf::Transform transform;
+    transform.setOrigin(globalTranslation_rh);
+    transform.setRotation(tfqt);
+
+    br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "world", "camera_pose"));
 }
 
 
-- 
2.7.4